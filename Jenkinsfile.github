@Library('cms-meta-tools') _
@Library('csm-shared-library') __

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timestamps()
    }

    environment {
        DOCKER_NAME = "cray-tftpd"
        CHART_NAME = "cms-ipxe"
        DESCRIPTION = "Cray Management System iPXE binaries"
        IS_STABLE = getBuildIsStable()
    }

    stages {
        stage("Clone cms_meta_tools repo") {
            steps {
                // This function is defined in cms-meta-tools:vars/cloneCMSMetaTools.groovy
                cloneCMSMetaTools()
            }
        }

        stage("Set Versions") {
            steps {
                // This function is defined in cms-meta-tools:vars/setVersionFiles.groovy
                setVersionFiles()
            }
        }

        stage("runBuildPrep") {
            steps {
                 withCredentials([usernamePassword(credentialsId: 'artifactory-algol60-readonly', passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USERNAME')]) {
                    sh "make runbuildprep"
                    }
            }
        }

        stage("Lint") {
            steps {
                sh "make lint"
            }
        }

        stage("Build Prep") {
            steps {
                sh "make chart_setup"
            }
        }

        stage("Build") {
            parallel {
                stage('Image') {
                    environment {
                        DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                        DOCKER_ARGS = getDockerBuildArgs(name: env.NAME, description: env.DESCRIPTION, version: env.DOCKER_VERSION)
                    }

                    steps {
                        sh "make image"
                    }
                }

                stage('Chart TFTP') {
                    steps {
                        sh "make chart_tftp"
                    }
                }

                stage('Chart TFTP-PVC') {
                    steps {
                        sh "make chart_tftp_pvc"
                    }
                }

                stage('Chart TFTPD-IPXE') {
                    steps {
                        sh "make chart_tftpd_ipxe"
                    }
                }
            }
        }

        stage('Publish ') {
            environment {
                DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
            }

            steps {
                publishCsmDockerImage(image: env.DOCKER_NAME, tag: env.DOCKER_VERSION, isStable: env.IS_STABLE)
                publishCsmHelmCharts(component: "cray-tftp", chartsPath: "${WORKSPACE}/kubernetes/.packaged", isStable: env.IS_STABLE)
            }
        }
    }
}

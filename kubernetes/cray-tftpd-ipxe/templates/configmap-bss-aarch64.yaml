{{/*
MIT License

(C) Copyright 2023-2024 Hewlett Packard Enterprise Development LP

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/}}
{{- $root := . -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: cray-ipxe-bss-ipxe-aarch64
  labels:
    app.kubernetes.io/name: {{ .Values.ipxe.name }}
data:
  bss.ipxe: >
    #!ipxe

    echo Chaining to BSS ...

    set attempt:int16 0

    set maxattempts:int16 {{ .Values.ipxe.bss_max_attempts }}

    set sleepytime:int8 0

    set ceiling:int8 {{ .Values.ipxe.bss_ceiling }}

    :start

    inc attempt

    inc sleepytime

    iseq ${sleepytime} ${ceiling} && set sleepytime:int32 {{ 1 | sub .Values.ipxe.bss_ceiling }} ||

    iseq ${attempt} ${maxattempts} && goto debug_retry ||

    echo Chain attempt ${attempt} of ${maxattempts}

    echo Hint: Press CTRL+C to skip a network interface

    # Iterate through all of the available network interfaces, starting with nic_index_vip.

    :dhcpstart

    set vidx:int8 {{ .Values.ipxe.nic_index_vip }}

    # If the VIP index does not exist, then default to 0. This is useful for systems with less NICs than what the default VIP index is set for.

    isset ${net${vidx}/mac} || set vidx:int8 0

    :dhcpcheck isset ${net${vidx}/mac} || goto retry

      # Attempt to use the NIC.

      ifclose net${vidx} || echo Failed to close net${vidx}

      sync

      ifopen net${vidx} || echo Failed to open net${vidx}

      ifconf -c dhcp net${vidx} && goto configured || ifclose net${vidx}
    
      # Increment our index and continue.

      # The VIP index indicates which network interface to try first, before iterating through the

      # remainder of the interfaces starting with interface zero. For example, a VIP index of 2 

      # would start with 2 and then proceed through net0, net1, net3, netX before wrapping around

      # back to net2 once all of the available NICs were exhausted.

      # If our index is 0, increment and continue. Skip all other funny business.

      iseq ${vidx} 0 && inc vidx && goto dhcpcheck ||
    
      # Else, if our current index is 1 less than the starting index, then set the index to 1 after the starting index.

      iseq ${vidx} {{ sub .Values.ipxe.nic_index_vip 1 }} && set vidx:int8 {{ .Values.ipxe.nic_index_vip | add1 }} && goto dhcpcheck ||

      # Else, if our current index is equal to our start index, start over at 0. Otherwise increment by one.

      iseq ${vidx} {{ .Values.ipxe.nic_index_vip }} && set vidx:int8 0 || inc vidx && goto dhcpcheck

      # Else, just plainly increment the index.

      inc vidx && goto dhcpcheck

    :configured

    echo net${vidx} IPv4 lease: ${net${vidx}/ip} MAC: ${net${vidx}/mac}

    chain --timeout {{ $root.Values.ipxe.chain_timeout }} http{{ if $root.Values.ipxe.build_with_cert }}s{{ end }}://{{ $root.Values.ipxe.api_gw }}/apis/bss/boot/v1/bootscript?mac=${net${vidx}/mac} || echo Failed to retrieve next chain from Boot Script Service over net${vidx} (http{{ if $root.Values.ipxe.build_with_cert }}s{{ end }}://{{ $root.Values.ipxe.api_gw }}/apis/bss/boot/v1/bootscript?mac=${net${vidx}/mac}) && goto start 

    ifclose net${vidx} || echo No routes to drop.

    :retry

    echo Failed to fetch boot script!

    echo Retrying in ${sleepytime} seconds ... (CTRL+C to skip)

    sleep ${sleepytime} ||

    goto start

    :debug_retry

    echo IPXE failed to retrieve next chain after ${maxattempts} attempts or was interrupted.

    goto debug

    :debug

    echo (type 'exit' to drop into BIOS).

    shell

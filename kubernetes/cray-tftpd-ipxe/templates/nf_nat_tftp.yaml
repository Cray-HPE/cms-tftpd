{{/*
MIT License

(C) Copyright 2021-2023 Hewlett Packard Enterprise Development LP

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/}}
{{- $baseChartValues := index .Values "cray-service" -}}
# Purpose: The purpose of this daemonset is to allow the nf_nat_tftp module
# to be loaded by the running kernel. The nf_nat_tftp kernel module is required
# for cray-tftp pods to work on a node.
#
# The master taint means that the cray-tftp pods only run on NCN worker
# nodes. However, even if the master taint was removed, the switch configurations
# would also have to be updated to have them peer with the master nodes. Even with
# speakers running on the masters, nothing is peering with them, so no LB traffic
# will ever go to the masters. 
#
# Because of the above, this daemonset only runs on NCN workers.
#
# This is implemented as a daemonset and not a job, because a daemonset
# is resilient to reboot operations. This is the quickest possible
# solution currently available for re-establishing a route to the TFTP
# pods in question, especially given nodes that miss the window of
# opportunity for tftp download often find themselves into a UEFI shell.
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: 'cray-tftp-modprobe'
  namespace: services
  labels:
    k8s-app: 'cray-tftp-modprobe'
spec:
  selector:
    matchLabels:
      name: 'cray-tftp-modprobe'
  template:
    metadata:
      labels:
        name: 'cray-tftp-modprobe'
      annotations:
        'sidecar.istio.io/inject': 'false'
    spec:
      containers:
      - name: modprobe
        resources:
          limits:
            memory: "20M"
          requests:
            cpu: ".1"
            memory: "20M"
        image: "artifactory.algol60.net/csm-docker/S-T-A-B-L-E/cray-tftpd:0.0.0-image"
        imagePullPolicy: Always
        command: ["/bin/ash"]
        args: ["-c", "modprobe nf_nat_tftp; while true; do sleep 999999; done"]
        securityContext:
          privileged: true
        volumeMounts:
          - mountPath: /lib/modules
            name: kernel-modules
      terminationGracePeriodSeconds: 1
      volumes:
      - name: kernel-modules
        hostPath:
          path: /lib/modules
